use std::num::NonZeroUsize;

use anyhow::Result;
use log::info;
use simplelog::SimpleLogger;
use clap::{
    Parser,
    ValueEnum,
    value_parser,
    CommandFactory,
    error::ErrorKind,
};

const LABOUT:&'static str = "\
          Recast the nonlocal part of (GTH/HGH)-type pseudo-potentials \
          into diagonal-projection form\n\
          \u{2211}ij |pi\u{27e9} hij \u{27e8}pj| => \u{2211}i |r bi\u{27e9} ei \u{27e8}bi r|\n\
          Ref: 10.1103/PhysRevB.41.5414";
#[derive(Parser)]
#[command(author, version, about, long_about=LABOUT)]
struct DForm{
    ///Parsing mode.
    #[arg(value_enum)]
    mode: Mode,

    ///Input file
    input: String,

    ///Chemical symbol of the requested chemical element
    #[arg(short, long)]
    element: Option<String>,
    ///Exchange-correlation functional used to creat the pseudo-potential
    #[arg(short, long, default_value_t=String::from("PBE"))]
    xc: String,
    ///Charge of the ionic core (number of valence electrons)
    #[arg(short, long,value_parser=value_parser!(NonZeroUsize))]
    qion: Option<NonZeroUsize>,
    ///Output file (Abinit's psp8 format). Errors if file already exists!
    #[arg(short, long, default_value_t=String::from("out.psp8"))]
    output: String,
    ///Radial grid separation in Bohr
    #[arg(short, long, default_value_t=0.01)]
    sep: f64,
}


#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
enum Mode {
    ///parses the top most pseudo-potential in the input file
    Single,
    ///parses a pseudo-potential from a cp2k databse given an element, xc functional, and qion
    Database,
}

fn main() -> Result<()> {

    let _ = SimpleLogger::init(log::LevelFilter::Info, simplelog::Config::default());

    let dform = DForm::parse();
    let gth: dform::PseudoGTH;

    let input = dform.input;
    let output= dform.output;

    let mut cmd = DForm::command();

    match dform.mode {

        Mode::Single => {
            info!("[single mode]: Attempt reading potential from file: '{}'", input);
            gth = dform::PseudoGTH::from_single(input.as_str())?;
            info!("[single mode]: Success!");

            info!("[single mode]: Attempt writing potential to file: '{}'", output);
            let wrt = gth.to_psp8(output.as_str(), "Generated by dform");
            match wrt {
                Ok(_) => (),
                Err(err) => {
                    let _err = err.to_string();
                    cmd.error(ErrorKind::Io, _err)
                        .exit();
                },
            };
            info!("[single mode]: Success!");
        },

        Mode::Database => {
            match (dform.element.as_deref(), dform.qion) {
                (None, _) | (_, None) => {
                    cmd.error(
                        ErrorKind::MissingRequiredArgument,
                        "In database parsing mode, both --element and --qion are required",
                    ).exit();
                }
                _ => ()
            };



            let element = dform.element.as_deref().unwrap();
            let xc = dform.xc;
            let qion: usize = dform.qion.unwrap().into();

            info!(
                "[database mode]: Attempt reading potential '{}-{}-q{}' from file: '{}'",
                element,
                xc,
                qion,
                input,
                );

            gth = dform::PseudoGTH::from_cp2k_db(
                input.as_str(),
                element,
                xc.as_str(),
                qion,
                )?;

            info!("[database mode]: Success!");

            info!(
                "[database mode]: Attempt writing potential '{}-{}-q{}' to file: '{}'",
                element,
                xc,
                qion,
                output,
                );
            let wrt = gth.to_psp8(
                output.as_str(),
                format!(
                    "Generated by dform {}: {}-{}-q{}",
                    cmd.get_version().as_ref().unwrap(),
                    element,
                    xc,
                    qion
                    ).as_str(),
                );
            match wrt {
                Ok(_) => (),
                Err(err) => {
                    let _err = err.to_string();
                    cmd.error(ErrorKind::Io, _err)
                        .exit();
                },
            };
            info!("[database mode]: Success!");

            },
    };

    Ok(())
}

